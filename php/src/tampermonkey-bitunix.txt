// ==UserScript==
// @name         Bitunix Helper
// @namespace    http://tampermonkey.net/
// @version      2025-04-10
// @author       Dogan Cinbir
// @description  try to take over the world!
// @match        https://www.bitunix.com/*
// @icon         https://www.bitunix.com/favicon.ico
// @grant        none
// ==/UserScript==


(function() {
'use strict';
window.addEventListener("load", () => {
console.info("Hello from Bitunix Helper");
// inc/styles.ts
var STYLE_INFO_LINE = {
  "position": "fixed",
  "bottom": "0",
  "right": "5px",
  "background": "rgba(255,2555,255,0.5)",
  "padding": "1px 2px",
  "zIndex": "100",
  "pointerEvents": "none",
  "font-size": "10px"
};
var BUTTON_STYLE_1 = {
  "background": "#e0e0e0",
  "border": "none",
  "color": "#333",
  "padding": "5px 10px",
  "fontSize": "12px",
  "borderRadius": "8px",
  "cursor": "pointer",
  "transition": "background-color 0.3s ease, transform 0.2s ease",
  "boxShadow": "0 4px 6px rgba(0, 0, 0, 0.08)"
};

// inc/input-helper.ts
var HotKey = class {
  constructor(keyCode, name, action) {
    this.keyCode = keyCode;
    this.name = name;
    this.action = action;
  }
  getDescription() {
    let keyCode = this.keyCode;
    if (keyCode.startsWith("Key")) {
      keyCode = keyCode.substring("Key".length);
    }
    if (keyCode.startsWith("Digit")) {
      keyCode = keyCode.substring("Digit".length);
    }
    return `[${keyCode}: ${this.name}]`;
  }
};
var HotKeyManager = class {
  constructor(show, hide) {
    this.show = show;
    this.hide = hide;
    this.hotKeys = {};
    this.subKeys = {};
    this.show = show;
    this.hide = hide;
    this.hotKeys = {};
    this.subKeys = null;
    document.addEventListener("keyup", (e) => {
      if (!this.subKeys) {
        this.hide("Strg-Shift");
      }
    });
    document.addEventListener("keydown", (e) => {
      if (e.code === "Escape") {
        this.subKeys = null;
        this.hide("Strg-Shift");
      }
      const next = (subKeys) => {
        if (subKeys.length) {
          this.subKeys = {};
          subKeys.forEach((subKey) => this.subKeys[subKey.keyCode] = subKey);
        }
        this.show(this.getHints());
      };
      if (this.subKeys?.[e.code]) {
        e.stopImmediatePropagation();
        e.preventDefault();
        this.subKeys[e.code].action(e, next);
        this.subKeys = null;
        this.hide("Strg-Shift");
      }
      if (e.shiftKey && e.altKey) {
        this.show(this.getHints());
        if (this.hotKeys[e.code]) {
          e.stopImmediatePropagation();
          e.preventDefault();
          this.hotKeys[e.code].action(e, next);
        }
      }
    });
    this.hide("Strg-Shift");
  }
  addKey(hotKey) {
    this.hotKeys[hotKey.keyCode] = hotKey;
  }
  getHints() {
    return Object.values(this.subKeys || this.hotKeys).map((action) => action.getDescription());
  }
};

// inc/tm-query.ts
var TmQuery = class _TmQuery {
  constructor(parentElement) {
    this.elements = parentElement instanceof _TmQuery ? [...parentElement.elements] : Array.isArray(parentElement) ? parentElement : [parentElement || document.body];
  }
  children(query) {
    const result = [];
    this.elements.forEach((element) => {
      _TmQuery.nodeListToArray(element.childNodes).forEach((node) => {
        if (!query || _TmQuery.elementMatches(node, query)) {
          result.push(node);
        }
      });
    });
    return new _TmQuery(result);
  }
  find$(query) {
    const parts = query.split(/\s+/);
    const result = _TmQuery.findAllByParts(this.elements, parts);
    return new _TmQuery(result);
  }
  filter$(query) {
    const result = this.elements.filter((e) => _TmQuery.elementMatches(e, query));
    return new _TmQuery(result);
  }
  get length() {
    return this.elements.length;
  }
  findOne(query) {
    return this.find$(query).elements[0];
  }
  asOne() {
    if (this.elements.length > 1) {
      console.info(this.elements);
      throw new Error("More tah one element!");
    }
    return this.elements[0];
  }
  asArray() {
    return this.elements;
  }
  forEach(callback) {
    this.elements.forEach(callback);
  }
  find(predicate) {
    return this.elements.find(predicate);
  }
  static findAllByParts(elements, parts) {
    const result = [];
    if (parts.length) {
      const queryPart = parts.shift();
      elements.forEach((element) => _TmQuery.findInElement(element, queryPart).forEach((r) => result.push(r)));
    }
    if (parts.length) {
      return _TmQuery.findAllByParts(result, parts);
    } else {
      return result;
    }
  }
  static nodeListToArray(source) {
    const result = [];
    for (let i = 0; i < source.length; i++) {
      result.push(source[i]);
    }
    return result;
  }
  static tokenListToArray(source) {
    const result = [];
    for (let i = 0; i < source.length; i++) {
      result.push(source[i]);
    }
    return result;
  }
  static findInElement(element, queryString) {
    const result = [];
    if (queryString.endsWith("*")) {
      return _TmQuery.nodeListToArray(element.querySelectorAll("*")).filter((e) => _TmQuery.elementMatches(e, queryString));
    } else {
      element.querySelectorAll(queryString).forEach((r) => result.push(r));
    }
    return result;
  }
  static elementMatches(element, queryString) {
    if (queryString.endsWith("*")) {
      if (queryString.startsWith(".")) {
        const prefix = queryString.substring(1, queryString.length - 1);
        return _TmQuery.tokenListToArray(element.classList).some((cls) => cls.startsWith(prefix));
      }
      if (queryString.startsWith("#")) {
        const prefix = queryString.substring(1, queryString.length - 1);
        return element.getAttribute("id").startsWith(prefix);
      }
      throw new Error(`Query "${queryString}" not implemented.`);
    } else {
      return element.matches(queryString);
    }
  }
  static firstChild(element, queryString) {
    if (!element) {
      return null;
    }
    for (const e of _TmQuery.nodeListToArray(element.childNodes)) {
      if (_TmQuery.elementMatches(e, queryString)) {
        return e;
      }
    }
    return null;
  }
  // STATICS
  // static hasPrefixedClass(element, clsPre) {
  //   return [...element.classList].some(cls => cls.startsWith(clsPre));
  // }
  //
  // static findPrefixedClass(element, clsPre) {
  //   return [...element.children].find(child => this.hasPrefixedClass(child, clsPre));
  // }
  //
  // static findPrefixedClasses(element, clsPre) {
  //   for (const pre of clsPre) {
  //     element = this.findPrefixedClass(element, pre);
  //     if (!element) {
  //       return null;
  //     }
  //   }
  //   return element;
  // }
  //
  //
  // static matches(element, queryString) {
  //   if (queryString.endsWith('*')) {
  //     const prefixString = queryString.substring(1, queryString.length - 1);
  //     return [...element.classList].some(cls => cls.startsWith(prefixString));
  //   } else {
  //     return element.matches(queryString);
  //   }
  // }
  //
  // static findContent(element, queryString) {
  //   if (queryString.endsWith('*')) {
  //     return [...element.querySelectorAll('*')].filter(e => this.matches(e, queryString));
  //   } else {
  //     return [...element.querySelectorAll(queryString)];
  //   }
  // }
  //
  // static find(query) {
  //   const stringParts = Array.isArray(query) ? query : query.split(' ');
  //   if (!stringParts.length) {
  //     return null;
  //   }
  //   let foundElements = [document];
  //   for (const part of stringParts) {
  //     const newElements = [];
  //     for (const element of foundElements) {
  //       if (part.startsWith(':')) {
  //         if (this.matches(element, part.substring(1))) {
  //           newElements.push(element);
  //         }
  //       } else {
  //         this.findContent(element, part).forEach(child => newElements.push(child));
  //       }
  //     }
  //     foundElements = newElements;
  //     if (!foundElements.length) {
  //       return null;
  //     }
  //   }
  //   return foundElements;
  // }
  //
  // static findAndClick(query) {
  //   const elements = this.find(query);
  //   if (elements.length === 1) {
  //     elements[0].click();
  //   } else {
  //     console.info(elements);
  //     throw new Error('multiple Elements to click');
  //   }
  // }
  //
  // static findContentAndClick(element, query) {
  //   const elements = this.findContent(element, query);
  //   if (elements.length === 1) {
  //     elements[0].click();
  //   } else {
  //     console.info(elements);
  //     throw new Error('multiple Elements to click');
  //   }
  // }
  //
  // static waitFor(query) {
  //   return MyAction.waitFor(() => this.find(query));
  // }
  //
  // static getScrollParent(node) {
  //   if (node == null) {
  //     return null;
  //   }
  //
  //   if (node.scrollHeight > node.clientHeight + 1) {
  //     return node;
  //   } else {
  //     return this.getScrollParent(node.parentNode);
  //   }
  // };
  // static async fetchElementsFromScrollable(parentSelector, entrySelector, convertToEntry, unifier) {
  //   const entryList = [];
  //   const scrollParent = this.find(parentSelector)[0];
  //   scrollParent.scrollTop = 0;
  //   let lastScroll = -1;
  //   while (lastScroll !== scrollParent.scrollTop) {
  //     await MyAction.wait(20);
  //     for (const row of MyQuery.find(entrySelector)) {
  //       const entry = convertToEntry(row);
  //       if (!entryList.find(e => e[unifier] === entry[unifier])) {
  //         entryList.push(entry)
  //       }
  //     }
  //     lastScroll = scrollParent.scrollTop
  //     scrollParent.scrollTop += scrollParent.clientHeight;
  //   }
  //   entryList.sort((a, b) => a[unifier].localeCompare(b[unifier]))
  //   return entryList;
  // }
  //
  // static async findElementInScrollable(parentSelector, entrySelector, convertToEntry, predicate) {
  //   const scrollParent = this.find(parentSelector)[0];
  //   scrollParent.scrollTop = 0;
  //   let lastScroll = -1;
  //   while (lastScroll !== scrollParent.scrollTop) {
  //     await MyAction.wait(20);
  //     for (const row of MyQuery.find(entrySelector)) {
  //       const entry = convertToEntry(row);
  //       if (predicate(entry)) {
  //         return [entry, row]
  //       }
  //     }
  //     lastScroll = scrollParent.scrollTop
  //     scrollParent.scrollTop += scrollParent.clientHeight;
  //   }
  //   return null;
  // }
};

// inc/tm-dom.ts
var TmDomElement = class _TmDomElement {
  constructor(type, innerText) {
    this.type = type;
    this.element = document.createElement(type);
    this.display = "";
    if (innerText) {
      this.element.innerText = innerText;
    }
  }
  get() {
    return this.element;
  }
  css(css) {
    _TmDomElement.setCss(this.element, css);
    return this;
  }
  attr(attrs) {
    _TmDomElement.setAttr(this.element, attrs);
    return this;
  }
  appendTo(_parent) {
    const parent = _parent instanceof _TmDomElement ? _parent.element : _parent;
    parent.append(this.element);
    return this;
  }
  prependTo(_parent) {
    const parent = _parent instanceof _TmDomElement ? _parent.element : _parent;
    parent.prepend(this.element);
    return this;
  }
  setInnerText(text) {
    this.element.innerText = text;
    return this;
  }
  setDisplayForHide(display) {
    this.display = display;
    return this;
  }
  setVisible(visible) {
    if (visible) {
      this.show();
    } else {
      this.hide();
    }
    return this;
  }
  show() {
    this.element.style.display = this.display;
    return this;
  }
  hide() {
    this.element.style.display = this.display;
    return this;
  }
  addTransition(transitionString) {
    if (this.element.style.transition?.length > 0) {
      this.element.style.transition = `${this.element.style.transition}, ${transitionString}`;
    } else {
      this.element.style.transition = transitionString;
    }
  }
  createHoverEffect(hoverCss) {
    const hoverOriginal = {};
    Object.keys(hoverCss).forEach((key) => hoverOriginal[key] = this.element.style[key]);
    this.element.addEventListener("mouseenter", () => {
      _TmDomElement.setCss(this.element, hoverCss);
    });
    this.element.addEventListener("mouseleave", () => {
      _TmDomElement.setCss(this.element, hoverOriginal);
    });
  }
  static createAt(parent, type, css) {
    const element = document.createElement(type);
    parent.append(element);
    if (css) {
      _TmDomElement.setCss(element, css);
    }
    return element;
  }
  static setCss(element, css) {
    Object.entries(css).forEach(([key, value]) => {
      element.style[key] = value;
    });
  }
  static setAttr(element, css) {
    Object.entries(css).forEach(([key, value]) => {
      element.setAttribute(key, value);
    });
  }
};
var TmDom = class _TmDom {
  static extendExisting(selectItems, itemCheck, itemModify, interval) {
    (selectItems() || []).forEach((item) => {
      if (!itemCheck(item)) {
        itemModify(item);
      }
    });
    if (interval) {
      setTimeout(() => _TmDom.extendExisting(selectItems, itemCheck, itemModify, interval), interval);
    }
  }
  static checkBoxIsChecked(_element) {
    const element = _element instanceof TmDomElement ? _element.get() : _element;
    return element.checked;
  }
  static checkBoxSetChecked(_element, value) {
    const element = _element instanceof TmDomElement ? _element.get() : _element;
    element.checked = value;
    element.dispatchEvent(new Event("change", { bubbles: true }));
  }
  static checkBoxToggleChecked(_element) {
    const element = _element instanceof TmDomElement ? _element.get() : _element;
    element.checked = !element.checked;
    element.dispatchEvent(new Event("change", { bubbles: true }));
  }
  static getValue(_element) {
    const element = _element instanceof TmDomElement ? _element.get() : _element instanceof TmQuery ? _element.asOne() : _element;
    return element.value;
  }
  static setValue(_element, value) {
    const element = _element instanceof TmDomElement ? _element.get() : _element instanceof TmQuery ? _element.asOne() : _element;
    element.value = value;
    element.dispatchEvent(new Event("input", { bubbles: true }));
  }
};

// inc/action-helper.ts
var TmAction = class {
  static rightClick(element) {
    element.dispatchEvent(new MouseEvent("contextmenu", {
      bubbles: true,
      cancelable: true,
      view: window
    }));
  }
  static hoverElement(element) {
    element.dispatchEvent(new MouseEvent("mouseover", {
      bubbles: true,
      cancelable: true,
      view: window
    }));
  }
  static poniterDown(element) {
    element.dispatchEvent(new PointerEvent("pointerdown", {
      bubbles: true,
      cancelable: true,
      pointerType: "mouse"
    }));
  }
  static wait(time) {
    return new Promise((res) => setTimeout(res, time));
  }
  static waitFor(callback) {
    return new Promise(async (res) => {
      let result = await callback();
      while (!result) {
        await this.wait(10);
        result = await callback();
      }
      res(result);
    });
  }
  // const hoverEvent = new MouseEvent("mouseover", {
  //   view: window,
  //   bubbles: true,
  //   cancelable: true,
  // });
};
var delay = (time) => TmAction.wait(time);
var TmActionListeners = class {
  constructor(element) {
    this.listeners = [];
    this.element = element instanceof TmDomElement ? element.get() : element;
  }
  addListener(event, callback) {
    this.listeners.push([event, callback]);
    this.element.addEventListener(event, callback);
  }
  clear() {
    this.listeners.forEach(([event, callback]) => {
      this.element.removeEventListener(event, callback);
    });
  }
};

// src/bitunix.ts
var DEFAULT_TEXT = "Powered by Dogan Cinbir";
var myHints = new TmDomElement("div").css(STYLE_INFO_LINE);
myHints.setDisplayForHide("block");
myHints.setInnerText(DEFAULT_TEXT);
myHints.appendTo(document.body);
var getPositionWindow = () => {
  const iframe = new TmQuery().find$("iframe").filter$("#tradingview_*").asOne();
  if (!iframe) {
    return null;
  }
  const longWindow = new TmQuery(iframe.contentDocument).find$('[data-name="source-properties-editor"][data-dialog-name="Long-Position"]');
  const shortWindow = new TmQuery(iframe.contentDocument).find$('[data-name="source-properties-editor"][data-dialog-name="Short-Position"]');
  const positionWindows = [...longWindow.asArray(), ...shortWindow.asArray()];
  if (positionWindows.length !== 1) {
    return null;
  }
  return positionWindows[0];
};
var analysePositionWindow = () => {
  const positionWindow = getPositionWindow();
  if (!positionWindow) {
    return;
  }
  const positionDefinition = {};
  for (const [name, selector] of [
    ["risk", '[data-section-name="Risk/RewardlongRisk"] input'],
    ["entry", '[data-section-name="Risk/RewardlongEntryPrice"] input'],
    ["tp", '[data-section-name="Risk/RewardlongProfitLevelPrice"] input'],
    ["sl", '[data-section-name="Risk/RewardlongStopLevelPrice"] input'],
    ["risk", '[data-section-name="Risk/RewardshortRisk"] input'],
    ["entry", '[data-section-name="Risk/RewardshortEntryPrice"] input'],
    ["tp", '[data-section-name="Risk/RewardshortProfitLevelPrice"] input'],
    ["sl", '[data-section-name="Risk/RewardshortStopLevelPrice"] input']
  ]) {
    const input = new TmQuery(positionWindow).find$(selector);
    console.info(name, input);
    if (input.length === 1) {
      positionDefinition[name] = parseFloat(TmDom.getValue(input));
    }
  }
  if (isNaN(positionDefinition.risk) || isNaN(positionDefinition.entry) || isNaN(positionDefinition.tp) || isNaN(positionDefinition.sl)) {
    return null;
  }
  return positionDefinition;
};
var round3 = (num) => {
  return Math.round(num * 1e3) / 1e3;
};
var setOrderTpSl = async (position) => {
  const tpSlCheck = new TmQuery().find$(".profit-group-item .arco-checkbox");
  if (!tpSlCheck.asOne().classList.contains("arco-checkbox-checked")) {
    tpSlCheck.asOne().click();
    await delay(50);
  }
  const tpSlDiv = new TmQuery().find$(".future-exchange-profit");
  const tpInput = tpSlDiv.find$('input[placeholder="TP"]');
  console.info({ tpInput });
  TmDom.setValue(tpInput, `${position.tp}`);
  const slInput = tpSlDiv.find$('input[placeholder="SL"]');
  console.info({ slInput });
  TmDom.setValue(slInput, `${position.sl}`);
};
var ensureOrderTab = async (tabClass) => {
  const tabButton = document.querySelector(tabClass);
  if (!tabButton.classList.contains("nav-item-active")) {
    tabButton.click();
    await TmAction.waitFor(() => new TmQuery().find$(".profit-group-item .arco-checkbox"));
    await delay(200);
  }
};
var calculateAmount = (position) => {
  const movement = Math.abs(position.entry - position.sl);
  const movementRatio = movement / position.entry;
  const neededPosition = position.risk / movementRatio;
  position.amount = neededPosition / position.entry;
};
var setLimitOrder = async (position) => {
  console.info("setLimitOrder", { position });
  await ensureOrderTab(".tab-item-id-limit");
  calculateAmount(position);
  const amountInputs = new TmQuery().find$(".amount-input");
  const priceInputsLimit = amountInputs.find((e) => e.classList.contains("limit-price-input-container"));
  const priceInputsAmount = amountInputs.find((e) => e != priceInputsLimit);
  TmDom.setValue(new TmQuery(priceInputsLimit).find$("input"), `${position.entry}`);
  TmDom.setValue(new TmQuery(priceInputsAmount).find$("input"), `${position.amount}`);
  await setOrderTpSl(position);
};
var setMarketOrder = async (position) => {
  console.info("setMarketOrder", { position });
  await ensureOrderTab(".tab-item-id-market");
  const actaulPrizeDiv = new TmQuery().find$(".info-main").children(".items-center").find$(".fvn-number");
  const actualPrizeText = actaulPrizeDiv.asOne().innerText;
  const actualPrize = parseFloat(actualPrizeText.replaceAll(/,/g, ""));
  position.entry = actualPrize;
  calculateAmount(position);
  const amountInputs = new TmQuery().find$(".amount-input");
  const amountInput = amountInputs.find((e) => !e.classList.contains("input-area"));
  TmDom.setValue(new TmQuery(amountInput).find$("input"), `${round3(position.amount)}`);
  await setOrderTpSl(position);
};
TmDom.extendExisting(
  () => {
    const positionWindow = getPositionWindow();
    const footer = new TmQuery(positionWindow).find$(".footer-*");
    if (footer.length !== 1) {
      return null;
    }
    const form = footer.asOne().parentElement;
    if (!form) {
      return null;
    }
    return [form];
  },
  (form) => new TmQuery(form).findOne('[tm-type="additional"]'),
  (form) => {
    const addDiv = new TmDomElement("div").attr({
      "tm-type": "additional"
    }).css({
      display: "flex",
      gap: "20px",
      margin: "5px 20px"
    }).appendTo(form);
    const createButton = (text) => {
      const newButton = new TmDomElement("button", text).attr({
        "tm-type": "additional"
      }).css(BUTTON_STYLE_1).css({
        flex: "1",
        width: "80px",
        background: "none",
        border: "1px solid #d1d4dc",
        color: "#d1d4dc"
      }).appendTo(addDiv);
      newButton.addTransition("color 0.3s ease");
      newButton.createHoverEffect({
        background: "#d1d4dc",
        color: "white"
      });
      return newButton;
    };
    const limitButton = createButton("Limit");
    new TmActionListeners(limitButton).addListener("click", (e) => {
      console.info("LIMIT");
      const position = analysePositionWindow();
      console.info({ position });
      if (position) {
        setLimitOrder(position);
      }
    });
    const marketButton = createButton("Market");
    new TmActionListeners(marketButton).addListener("click", (e) => {
      console.info("MARKET");
      const position = analysePositionWindow();
      console.info({ position });
      if (position) {
        setMarketOrder(position);
      }
    });
  },
  300
);
var hotKeyManager = new HotKeyManager(
  (hints) => myHints.setInnerText(hints.join(" ")),
  (hint) => myHints.setInnerText(`${DEFAULT_TEXT} (${hint})`)
);
hotKeyManager.addKey(new HotKey("KeyA", "Test", (e, next) => {
  console.info("Test", e);
}));

  });
})();