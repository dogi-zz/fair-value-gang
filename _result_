//@version=6
indicator("Fair Value Gangster", "FV-Gang", overlay = true, max_lines_count = 500, max_boxes_count = 500)


/// Features
/// 
/// == Fair Value Gaps ==
/// 
/// Erkennung der Gaps im 1h Timeframe
/// 
/// -- Detected Alarm:
///    (Immer zur vollen Stunde)
///    - Mit der Info wie groß sie ist
///    - Bei angenommen 0.04% gebühren (bissl mehr als in Echt) wie hoch müsste man das RRR einstellen um auf 1:3 zu kommen
/// -- Enter Alarm:
///    - Mit den Infos von "Detected"
///    - plus dem möglichen Ratio (ohne Gebühr) zum Maximum das in der Zwischenzeit gesehen wurde
/// 
/// == RSI-Divergenz ==
///    
/// Übernimmt den Alarm aus dem "RSI-Divergence Indicator"
///    
/// Es wird nur die Divergenz angezeigt, für details den Original Indkator dazunehmen
///    
/// == EMAS ==
///    
/// Plottet den 20er 50er und 200er EMA
/// 



//------------------------------------------------------------------------------
//Settings
//-----------------------------------------------------------------------------

// ... settings.pine

currentHourTime = timestamp("UTC", year, month, dayofmonth, hour, 0)
isNewHour = currentHourTime != currentHourTime[1]
hourBars = (60 / timeframe.multiplier)


// ... fvg.settings.pine

// =============== FVG ===============

fvgMaxAge = input.int(72, "FVG-Maximum Age in Hours", group="FVG Einstellungen")
fvgAlarmLevel = input.float(0.75, "FVG-Near Level", step=0.1, group="FVG Einstellungen")
fvgTouchThreshold = input.float(0.1, "FVG-Touch Threshold", minval=0.0, maxval=1, step=0.01, group="FVG Einstellungen")

fvgMaxAgeBars = fvgMaxAge * hourBars

fvgInSizeLimitMode = input.string("percent", "FVG-GrößenLimit", options=["percent", "atr"], group="FVG Einstellungen")
fvgAtrLength = input.int(14, "FVG-ATR Length", group="FVG Einstellungen")
fvgAtrFactor = input.float(0.5, "FVG-Threshold Factor", minval=0.0, step=0.1, group="FVG Einstellungen")
fvgPercentThreshold = input.float(0.5, "FVG-Percent-Threshold", minval=0.0, step=0.1, group="FVG Einstellungen")

rrrHint = input.bool(true, "RiskReward Hint", group="FVG Risk/Reward")
rrrFees = input.float(0.04, "Calculation Fees", minval=0.0, step=0.1, group="FVG Risk/Reward")
fvgRrrTarget = input.float(3, "Desired Range", minval=0.0, step=0.1, group="FVG Risk/Reward")

// ... lsob.settings.pine

losbShow = input.bool(false, "LSOB-Anzeigen", group="LSOB Einstellungen")

lsobCheckDistance = input.int(5, "LSOB-Check distance", group="LSOB Einstellungen")
lsobMaxAge = input.int(72, "LSOB-Maximum Age in Hours", group="LSOB Einstellungen")
lsobTouchThreshold = input.float(0.1, "LSOB-Touch Threshold", minval=0.0, maxval=1, step=0.01, group="LSOB Einstellungen")



// ... side-by-side.settings.pine



// =============== SIDE-BY-SIDE SETTINGS ===============

sbsInSizeLimitMode = input.string("percent", "SBS-GrößenLimit", options=["percent", "atr"], group="Side By Side Einstellungen")
sbsAtrLength = input.int(14, "SBS-ATR Length", group="FVG Einstellungen")
sbsAtrFactor = input.float(0.5, "SBS-Threshold Factor", minval=0.0, step=0.1, group="Side By Side Einstellungen")
sbsPercentThreshold = input.float(0.5, "SBS-Percent-Threshold", minval=0.0, step=0.1, group="Side By Side Einstellungen")

sbsTolerance = input.float(10, "SBS-Body Tolerance (%)", minval=0.0, step=0.01, group="Side By Side Einstellungen")



// ... rsi-div.settings.pine


// =============== RSI-DIVERGENCE SETTINGS ===============

rsiLength = input.int(title="RSI Period", minval=1, defval=14, group="RSI - Divergence")
rsiLookbackR = input.int(title="RSI Pivot Lookback Right", defval=5, display = display.data_window, group="RSI - Divergence")
rsiLookbackL = input.int(title="RSI Pivot Lookback Left", defval=5, display = display.data_window, group="RSI - Divergence")
rsiRangeUpper = input.int(title="RSI Max of Lookback Range", defval=60, display = display.data_window, group="RSI - Divergence")
rsiRangeLower = input.int(title="RSI Min of Lookback Range", defval=5, display = display.data_window, group="RSI - Divergence")


rsiOffsetLeft = rsiLookbackR * hourBars
rsiOffsetRight = rsiLookbackR * hourBars




// =============== COMMONS ===============

bullBase = input.color(#089981, "Bullish Color", group="Styles")
bearBase = input.color(#f23645, "Bearish Color", group="Styles")

bullCss        = color.new(bullBase, 70)
bearCss        = color.new(bearBase, 70)
bullCssBorder  = color.new(bullBase, 50)
bearCssBorder  = color.new(bearBase, 50)

bullCssLight   = color.new(bullBase, 95)
bearCssLight   = color.new(bearBase, 95)
bullCssBorderLight   = color.new(bullBase, 90)
bearCssBorderLight   = color.new(bearBase, 90)

textColor = input.color(color.white, "Text Color", group="Styles")
noneColor = color.new(color.white, 100)



// ... commons.pine



isBull(offset = 0) =>
  close[offset] > open[offset]

isBear(offset = 0) =>
  close[offset] < open[offset]

bodySize(offset = 0) =>
    math.abs(close[offset] - open[offset])

valueToPercent(value, index = 0) =>
    value / open[index] * 100.

proportionPercent(baseValue, propotionValue) =>
    propotionValue / baseValue * 100.
    
approxEq(value, target, tollerance) =>
    math.abs(value - target) < tollerance
        

getConditionalText(condition, txt, prefix) =>
    condition ? ( prefix + txt ) : ""

getNumberText(num) =>
    num < 1 ? ("0" + str.tostring(num, "#.0")) : str.tostring(num, "#.0")
    
    
getRiskRewardTargetFromSize (min, max, rrrTarget) =>
  sizePercent = (max - min) / min * 100,
  rrrSL = sizePercent / 2 + rrrFees,
  rrrTP = rrrSL * rrrTarget + rrrFees,
  rrrTargetText = rrrHint ? ("1:" + getNumberText((rrrSL + rrrTP)/rrrSL)) : "",
  percentText = str.tostring(sizePercent, format.percent),
  [percentText, rrrTargetText]

getPercentFromSize (min, max) =>
  sizePercent = (max - min) / min * 100,
  sizePercent


getMaxRatioText (min, max, max_value) =>
  sizePercent = (max - min) / min * 100,
  center = (max - min) / 2,
  maxPercent = math.abs(max_value - center) / min * 100,
  sl = sizePercent / 2,
  "1:" + getNumberText(maxPercent + sl)
  
  

// ... fvg.functions.pine

fvgDebug = false
fvgDebugStartTime = 0
fvgAtrHour = request.security(syminfo.tickerid, "60", ta.atr(fvgAtrLength))

getFvgThreshold() =>
    if fvgInSizeLimitMode == "percent"
        fvgPercentThreshold * open[1] / 100
    else
        fvgAtrHour * fvgAtrFactor

getFvgAlarmLineLevel(isBull, min, max) =>
    height = max - min
    if isBull
        max + height * fvgAlarmLevel
    else
        min - height * fvgAlarmLevel


//-----------------------------------------------------------------------------

type FvgDefinition 
    bool  isBull
    float min
    float max
    float alarmLevel
    float startValue
    int   startTime  // auto
    int   startIndex = na // manual
 
createFvgDefinition (bool isBull, float min, float max, float startValue) => 
    alarm_level = getFvgAlarmLineLevel(isBull, min, max)
    FvgDefinition.new(isBull, min, max, alarm_level, na, time[2], na)

//-----------------------------------------------------------------------------

type FvgState
    string label
    bool  was_invalidated = false
    bool  was_invalidate_enter = false
    bool  was_near = false
    bool  was_entered = false
    float  max_value = 0.0
    bool isDead = false

createFvgFvgState(FvgDefinition fvg) => 
    [percentText, rrrTargetText] = getRiskRewardTargetFromSize(fvg.min, fvg.max, fvgRrrTarget)
    label = percentText + getConditionalText(rrrHint, rrrTargetText, " ") + getConditionalText(fvgDebug, str.tostring(fvg.startTime), " ")
    FvgState.new()
    
//-----------------------------------------------------------------------------

type FvgDraw
    box   drawBox
    line  centerLine
    line  alarmLine
    label infoLabel

        
createFvgDraw (FvgDefinition fvg, FvgState state) => 
    height = fvg.max - fvg.min
    center_line_level = fvg.min + height * 0.5

    colorBg = fvg.isBull ? bullCss : bearCss
    colorLine = fvg.isBull ? bullCssBorder : bearCssBorder

    b = box.new(fvg.startIndex, fvg.max, bar_index, fvg.min, bgcolor = colorBg, border_color = colorLine)
    l1 = line.new(x1=fvg.startIndex, y1=center_line_level, x2=bar_index, y2=center_line_level, color=color.gray, style=line.style_dotted, xloc=xloc.bar_index)
    l2 = line.new(x1=fvg.startIndex, y1=fvg.alarmLevel, x2=bar_index, y2=fvg.alarmLevel, color=colorLine, style=line.style_dotted, xloc=xloc.bar_index)
    infoLabel = label.new(fvg.startIndex+1, center_line_level, state.label, size=size.small, color=colorLine, textcolor=textColor, style=label.style_label_left)

    FvgDraw.new(b, l1, l2, infoLabel)
    
fvgDrawSetInvalidated(FvgDraw draw, FvgDefinition def) =>
    if def.isBull
        box.set_bgcolor(draw.drawBox, bullCssLight)
        box.set_border_color(draw.drawBox, bullCssBorderLight)
    else 
        box.set_bgcolor(draw.drawBox, bearCssLight)
        box.set_border_color(draw.drawBox, bearCssBorderLight)

fvgDrawRemove(FvgDraw draw) =>
    box.delete(draw.drawBox)
    line.delete(draw.centerLine)
    line.delete(draw.alarmLine)
    label.delete(draw.infoLabel)


//-----------------------------------------------------------------------------

type Fvg
    FvgDefinition def
    FvgDraw draw
    FvgState state

//-----------------------------------------------------------------------------


fvgDetect() =>
    threshold = getFvgThreshold()
    before_low = low[3]
    before_high = high[3]
    after_low = low[1]
    after_high = high[1]
    FvgDefinition new_fvg = na
    isBull = after_low > before_high and (after_low - before_high) > threshold
    isBear = after_high < before_low and (before_low - after_high) > threshold
    if after_low > before_high and (after_low - before_high) > threshold
        new_fvg := createFvgDefinition(true, before_high, after_low, open[2])
    if after_high < before_low and (before_low - after_high) > threshold
        new_fvg := createFvgDefinition(false, after_high, before_low, open[2])
    new_fvg


    
fvgGetHeightCenter(Fvg fvg) =>
    height = fvg.def.max - fvg.def.min
    center = fvg.def.min + height / 2
    [height, center]

fvgGetMaxValue(Fvg fvg) =>
    [height, center] = fvgGetHeightCenter(fvg)
    fvg.def.isBull ? (close - center) : (center - close)

fvgGetImpaled(Fvg fvg) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low  < def.min) : (high > def.max)

fvgGetEntered(Fvg fvg, threshold) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low < def.max - height * threshold) : (high > def.min + height * threshold)
     
fvgGetCloseOutside(Fvg fvg) =>
    def = fvg.def
    def.isBull ? (close[1] > def.max) : (close[1] > def.min)
     
fvgGetNear(Fvg fvg) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low < def.alarmLevel) : (high > def.alarmLevel)
     

fvgSetEnterText(Fvg fvg) =>
    [percentText, rrrTargetText] = getRiskRewardTargetFromSize(fvg.def.min, fvg.def.max, fvgRrrTarget)
    new_text = percentText + " " + getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value) + getConditionalText(rrrHint, rrrTargetText, " ")
    label.set_text(fvg.draw.infoLabel, new_text + getConditionalText(fvgDebug, str.tostring(fvg.def.startTime), " "))
  
fvgGetDetectedText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-DETECTED"
    tagContent := tagContent + "," + "size:"+sizePercentText
    "size:"+sizePercentText+"["+tagContent+"]"
    
fvgGetEnteredText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-ENTER"
    tagContent := tagContent + "," + "size:"+sizePercentText
    tagContent := tagContent + "," + "ratio:"+maxRatioText
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgGetNearText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-NEAR"
    tagContent := tagContent + "," + "size:"+sizePercentText
    tagContent := tagContent + "," + "ratio:"+maxRatioText
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgGetInvalidatedText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-INVALIDATED"
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgPerformStep(Fvg fvg) =>
    actionInvalidate = false
    actionEntered = false
    actionNear = false
    expired = (bar_index - fvg.def.startIndex) > fvgMaxAgeBars
    state = fvg.state
    if not expired and not fvg.state.was_invalidated
        state.max_value := math.max(state.max_value, fvgGetMaxValue(fvg))
        if fvgGetImpaled(fvg)
            state.was_invalidated := true
            actionInvalidate := true
            state.isDead := true
        else if not state.was_invalidate_enter and fvgGetEntered(fvg, fvgTouchThreshold)
            state.was_invalidate_enter := true
        else if isNewHour and state.was_invalidate_enter and fvgGetCloseOutside(fvg)
            state.was_invalidated := true
            actionInvalidate := true
            state.isDead := true
        
        if not state.was_entered and fvgGetEntered(fvg, 0.)
            state.was_entered := true
            actionEntered := true
        else if not state.was_near and fvgGetNear(fvg)
            state.was_near := true
            actionNear := true
    else
        state.isDead := true
    [state, actionInvalidate, actionEntered, actionNear]


// ... fvg.main.pine
  
//-----------------------------------------------------------------------------
// FVG - Detection and display
//-----------------------------------------------------------------------------


var fvg_lastStartTime = 0
var fvg_records = array.new<Fvg>(0)

bool fvgDetected = false
string fvgDetectedText = ""

if isNewHour
    new_fvg = request.security(syminfo.tickerid, "60", fvgDetect())

    if not na(new_fvg) and new_fvg.startTime != fvg_lastStartTime
        new_fvg.startIndex := bar_index - 2 * hourBars
        fvg_lastStartTime := new_fvg.startTime

        state = createFvgFvgState(new_fvg)
        draw = createFvgDraw(new_fvg, state)

        fvg = Fvg.new(new_fvg, draw, state)
        fvg_records.unshift(fvg)

        fvgDetected := true
        fvgDetectedText := fvgGetDetectedText(fvg)

//-----------------------------------------------------------------------------
// FVG - Mitigation Logik
//-----------------------------------------------------------------------------
// Boxen rechts verschieben oder "abschließen"

bool fvgShowEnter = false
bool fvgShowNear = false
string fvgShowEnterText = na
string fvgShowNearText = na
bool fvgShowInvalidated = false
// 
// float alarmMin = 0
// float alarmMax = 0
// bool alarmBull = false
// 

if fvg_records.size() > 0
    for i = 0 to fvg_records.size() -1
        fvg = fvg_records.get(i)

        if not fvg.state.isDead and (fvgDebugStartTime == 0 or fvg.def.startTime == fvgDebugStartTime)
            [state, actionInvalidate, actionEntered, actionNear] = fvgPerformStep(fvg)
            fvg.state := state

            if actionEntered
                fvgShowEnter := true
                fvgShowEnterText := fvgGetEnteredText(fvg)
                fvgSetEnterText(fvg)

            if actionNear
                fvgShowNear := true
                fvgShowNearText := fvgGetNearText(fvg)
                fvgSetEnterText(fvg)

            if actionInvalidate
                fvgShowInvalidated := true
                fvgDrawSetInvalidated(fvg.draw, fvg.def)

            if not state.isDead
                box.set_right(fvg.draw.drawBox, bar_index)
                line.set_x2(fvg.draw.centerLine, bar_index)
                line.set_x2(fvg.draw.alarmLine, bar_index)

        fvg_records.set(i, fvg)

if fvg_records.size() > 0
    for i = fvg_records.size()-1 to 0
        fvg = fvg_records.get(i)
        if box.get_left(fvg.draw.drawBox) < bar_index - fvgMaxAgeBars
            fvgDrawRemove(fvg.draw)
            fvg_records.remove(i)
        
// 
// 
plotshape(fvgShowEnter, style=shape.triangledown, location=location.abovebar, color=color.gray, size=size.tiny)
plotshape(fvgShowInvalidated, style=shape.xcross, location=location.abovebar, color=color.red, size=size.tiny)
plotshape(fvgShowNear, style=shape.flag, location=location.abovebar, color=color.lime, size=size.tiny)


//-----------------------------------------------------------------------------}
//FVG - Alerts
//-----------------------------------------------------------------------------{

//alertcondition(fvgShowEnter, 'FVG-enter', '{{ticker}} FairValueGap ENTER')
//alertcondition(fvgShowNear, 'FVG-near', '{{ticker}} FairValueGap NEAR')
//alertcondition(fvgShowInvalidated, 'FVG-invalid', '{{ticker}} FairValueGap invalidated')

if fvgShowEnter
    alert(syminfo.ticker + "FVG Entered " + fvgShowEnterText, alert.freq_once_per_bar)
else if fvgShowNear
    alert(syminfo.ticker + "FVG Near " + fvgShowNearText, alert.freq_once_per_bar)
else if fvgDetected
    alert(syminfo.ticker + "FVG detected " + fvgDetectedText, alert.freq_once_per_bar)
    


// ... side-by-side.pine


// =============== SIDE-BY-SIDE ===============

sbsAtrHour = request.security(syminfo.tickerid, "60", ta.atr(sbsAtrLength))

getSideBySideThreshold() =>
    if sbsInSizeLimitMode == "percent"
        sbsPercentThreshold * open[1] / 100
    else
        sbsAtrHour * sbsAtrFactor


spsBull = false
spsBear = false

if isNewHour
    threshold = getSideBySideThreshold()
    if bodySize(4) > threshold and bodySize(3) > threshold and bodySize(2) > threshold
        p1 = math.abs(100 - proportionPercent(bodySize(4), bodySize(3)))
        p2 = math.abs(100 - proportionPercent(bodySize(4), bodySize(2)))
        p3 = proportionPercent(bodySize(4), bodySize(1))
        if p1 < sbsTolerance and p2 < sbsTolerance and p3 < 50
            if isBear(4) and isBull(3) and isBear(2) and isBull(1)
                spsBull := true
            if isBull(4) and isBear(3) and isBull(2) and isBear(1)
                spsBear := true
                  
plotshape(
  spsBull ? low[1] : na,
  offset=-1,
  title="Side By Side Bullish",
  text="SBS-Bull",
  style=shape.labelup,
  location=location.absolute,
  color=color.gray,
  textcolor=color.white
  )
plotshape(
  spsBear ? high[1] : na,
  offset=-1,
  title="Side By Side Bearish",
  text="SBS-Bear",
  style=shape.labeldown,
  location=location.absolute,
  color=color.gray,
  textcolor=color.white
  )

if spsBull
    alert(syminfo.ticker + " Side By Side Bullish", alert.freq_once_per_bar)
if spsBear
    alert(syminfo.ticker + " Side By Side Bearish", alert.freq_once_per_bar)



// ... rsi-div.main.pine

// =============== RSI-DIVERGENCE FUNCTIONALITY ===============





rsiIsInRange(cond) =>
	bars = ta.barssince(cond == true)
	rsiRangeLower <= bars and bars <= rsiRangeUpper


rsiDetect() =>
    rsiOsc = ta.rsi(close, rsiLength)

    // Bullish
    plFound = na(ta.pivotlow(rsiOsc, rsiLookbackL, rsiLookbackR)) ? false : true
    inRangePl = rsiIsInRange(plFound[1])
    oscHL = rsiOsc[rsiLookbackR] > ta.valuewhen(plFound, rsiOsc[rsiLookbackR], 1) and inRangePl
    // Price: Lower Low
    rsiPriceLL = low[rsiLookbackR] < ta.valuewhen(plFound, low[rsiLookbackR], 1)
    bullCondAlert = rsiPriceLL and oscHL and plFound
    bullAlertCond = rsiOsc < 30 and bullCondAlert

    // Bearish
    phFound = na(ta.pivothigh(rsiOsc, rsiLookbackL, rsiLookbackR)) ? false : true
    inRangePh = rsiIsInRange(phFound[1])
    oscLH = rsiOsc[rsiLookbackR] < ta.valuewhen(phFound, rsiOsc[rsiLookbackR], 1) and inRangePh

    // Price: Higher High
    rsiPriceHH = high[rsiLookbackR] > ta.valuewhen(phFound, high[rsiLookbackR], 1)

    bearCondAlert = rsiPriceHH and oscLH and phFound
    bearAlertCond = rsiOsc > 70 and bearCondAlert


    [plFound, bullAlertCond, phFound, bearAlertCond]

rsi60PlFound = false
rsi60BullAlertCond = false
rsi60PhFound = false
rsi60BearAlertCond = false
if isNewHour
    [_rsi60PlFound, _rsi60BullAlertCond, _rsi60PhFound, _rsi60BearAlertCond] = request.security(syminfo.tickerid, "60", rsiDetect())
    rsi60PlFound := _rsi60PlFound
    rsi60BullAlertCond := _rsi60BullAlertCond
    rsi60PhFound := _rsi60PhFound
    rsi60BearAlertCond := _rsi60BearAlertCond

// Bullish
plot(
  rsi60PlFound ? low[rsiOffsetRight] : na,
  offset=-rsiOffsetRight,
  title="Regular Bullish",
  linewidth=2,
  color=(rsi60BullAlertCond ? bullCssBorderLight : noneColor),
  display = display.pane
  )

plotshape(
  rsi60BullAlertCond ? low[rsiOffsetRight] : na,
  offset=-rsiOffsetRight,
  title="Regular Bullish Label",
  text="RSI-Div Bull",
  style=shape.labelup,
  location=location.absolute,
  color=bullCssBorder,
  textcolor=textColor
  )

 // Bearish
plot(
  rsi60PhFound ? high[rsiOffsetRight] : na,
  offset=-rsiOffsetRight,
  title="Regular Bearish",
  linewidth=2,
  color=(rsi60BearAlertCond ? bearCssBorderLight : noneColor),
  display = display.pane
  )

plotshape(
  rsi60BearAlertCond ? high[rsiOffsetRight] : na,
  offset=-rsiOffsetRight,
  title="Regular Bearish Label",
  text="RSI-Div Bear",
  style=shape.labeldown,
  location=location.absolute,
  color=bearCssBorder,
  textcolor=textColor
  )

if isNewHour
    if rsi60BullAlertCond
        alert(syminfo.ticker + " RSI-Divergence Bullish", alert.freq_once_per_bar)
    if rsi60BearAlertCond
        alert(syminfo.ticker + " RSI-Divergence Bearish", alert.freq_once_per_bar)


// ... emas.pine


plotEmas = input.bool(true, "Plot EMAs", group="Extras")

plot(plotEmas ? ta.ema(close, 20) : na, title="EMA 20", color=color.orange)
plot(plotEmas ? ta.ema(close, 50) : na, title="EMA 50", color=color.blue, linewidth = 2)
plot(plotEmas ? ta.ema(close, 200) : na, title="EMA 200", color=color.gray, linewidth = 3)



// ... lsob.functions.pine

lsobMaxAgeBars = lsobMaxAge * hourBars


type LsobDefinition 
    bool  isBull
    float min
    float max
    float startValue
    int   startTime  // auto
    int   startIndex = na // manual

createLsobDefinition (bool isBull, float min, float max, float startValue) => 
    LsobDefinition.new(isBull, min, max,  na, time[2], na)
    
type LsobDraw
    box   drawBox
    label infoLabel

type Lsob
    LsobDefinition def
    LsobDraw draw
    bool wasLeaved = false
    bool isDead = false
    bool isDelete = false
    bool wasInvalidated = false



createLsobDraw (LsobDefinition lsob) => 
    height = lsob.max - lsob.min
    center_line_level = lsob.min + height * 0.5

    colorBg = color.silver // lsob.isBull ? bullCss : bearCss

    b = box.new(lsob.startIndex, lsob.max, bar_index, lsob.min, border_color = colorBg, bgcolor=color.white)
    infoLabelText = "LSOB"// + " " + (lsob.isBull?"bull":"bear") + " " + str.tostring(lsob.startTime)
    infoLabelStyle = lsob.isBull ? label.style_label_upper_left :  label.style_label_lower_left
    infoLabelY  = lsob.isBull ? lsob.min : lsob.max
    infoLabel = label.new(lsob.startIndex, infoLabelY, infoLabelText, size=size.small, color=color.silver, textcolor=color.white, style=infoLabelStyle)

    LsobDraw.new(b, infoLabel)


lsobIsLeaved(Lsob lsob) =>
    lsob.def.isBull ? (low > lsob.def.max) : (high < lsob.def.min)
    
lsobGetImpaled(Lsob lsob) =>
    lsob.def.isBull ? (low < lsob.def.min) : (high > lsob.def.max)
    
lsobGetInvalidated(Lsob lsob) =>
    height = lsob.def.max - lsob.def.min
    touchThreshold = height * lsobTouchThreshold
    tochGap = lsob.def.isBull ? lsob.def.max - touchThreshold : lsob.def.min + touchThreshold
    isInvalidated = lsob.def.isBull ? low < tochGap : high > tochGap
    isInvalidated

lsobDetect() =>
    highest = ta.highest(lsobCheckDistance)
    lowest = ta.lowest(lsobCheckDistance)
    isBull = low == lowest
    isBear = high == highest
    LsobDefinition new_lsob = na
    if isBull
        new_lsob := createLsobDefinition(true, low, high, open[2])
    if isBear
        new_lsob := createLsobDefinition(false, low, high, open[2])
    new_lsob
    
lsobPerformStep(Lsob lsob) =>
    invalidated = false
    entered = false
    near = false
    expired = (bar_index - lsob.def.startIndex) > lsobMaxAgeBars
    impaled = lsobGetImpaled(lsob)
    if not lsob.isDelete and (impaled or expired)
        lsob.isDelete := true
    if not lsob.isDelete and not expired
        if not lsob.wasLeaved
            if lsobIsLeaved(lsob)
                lsob.wasLeaved := true
        else if not lsob.wasInvalidated
            if lsobGetInvalidated(lsob)
                lsob.wasInvalidated := true

        //else if not lsob.wasLeaved and lsobIsLeaved(lsob)
        //    lsob.wasLeaved := true
        // else if not lsob.info.was_entered and fvgGetEntered(lsob)
        //     lsob.info.was_entered := true
        //     entered := true
        // else if fvgGetNear(lsob)
        //     lsob.info.was_entered := true
        //     near := true

    [lsob, entered, near]
    
// ... lsob.main.pine


var lsob_lastStartTime = 0

var lsob_records = array.new<Lsob>(0)

if losbShow and isNewHour
    new_lsob = request.security(syminfo.tickerid, "60", lsobDetect())

    if not na(new_lsob) and new_lsob.startTime != lsob_lastStartTime //  and new_lsob.startTime == 1750244400000
        // label.new(bar_index, high, "Detected", size=size.small, color=color.silver, textcolor=color.black, style=label.style_label_down)
        new_lsob.startIndex := bar_index
        lsob_lastStartTime := new_lsob.startTime

        draw = createLsobDraw(new_lsob)

        lsob = Lsob.new(new_lsob, draw)
        lsob_records.unshift(lsob)

if lsob_records.size() > 0
    for i = 0 to lsob_records.size() -1
        lsob = lsob_records.get(i)

        if not lsob.isDead
            [_lsob, entered, near] = lsobPerformStep(lsob)
            lsob := _lsob

            // label.new(bar_index, high, str.tostring(low)+" "+str.tostring(lsob.def.min), size=size.small, color=color.silver, textcolor=color.black, style=label.style_label_down)

            // if entered
            //     fvgShowEnter := true
            //     fvgShowEnterInfo := fvgGetEnterText(lsob)
            //     fvgSetEnterText(lsob)

            // if near
            //     fvgShowNear := true
            //     fvgShowNearInfo := fvgGetEnterText(lsob)
            //     fvgSetEnterText(lsob)

            if lsob.wasInvalidated
                box.set_bgcolor(lsob.draw.drawBox, color.white)

            if lsob.isDelete or lsob.wasInvalidated
                lsob.isDead := true
            else
                box.set_right(lsob.draw.drawBox, bar_index)
                if lsob.wasLeaved
                    box.set_bgcolor(lsob.draw.drawBox, color.silver)

        lsob_records.set(i, lsob)
        
if lsob_records.size() > 0
    for i = lsob_records.size()-1 to 0
        lsob = lsob_records.get(i)
        if lsob.isDelete or box.get_left(lsob.draw.drawBox) < bar_index - lsobMaxAgeBars
            box.delete(lsob.draw.drawBox)
            label.delete(lsob.draw.infoLabel)
            lsob_records.remove(i)
