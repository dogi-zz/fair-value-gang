
AlarmDefinition lsobTouchedAlarm = na


// LSOBS Überprüfen
if lsob_records.size() > 0
    for i = lsob_records.size()-1 to 0
        lsob = lsob_records.get(i)

        l = low[1]
        h = high[1]
        if lsob.def.prefix == "1h"
            l := lsob1h_l
            h := lsob1h_h
        if lsob.def.prefix == "4h"
            l := lsob4h_l
            h := lsob4h_h

        // leaved = request.security(syminfo.tickerid, lsob.def.timeframe, lsobGetLeaved(lsob.def.isBull, lsob.def.min, lsob.def.max))
        [state, action] = lsobCheckInBar(lsob, l, h)


        if action == "activated"
            activateLsobDraw(lsob.def, lsob.draw)
            if lsobDebug
                infoLabelY  = lsob.def.isBull ? lsob.def.min : lsob.def.max
                infoLabelText =  lsobGetName(lsob.def) + " Activated"
                infoLabelStyle = lsob.def.isBull ? label.style_label_upper_left :  label.style_label_lower_left
                label.new(bar_index, infoLabelY, lsobGetName(lsob.def) + " activated", size=size.small, color=color.white, textcolor=color.black, style=infoLabelStyle)
        else if action == "touch"
            lsobTouchedAlarm := createAlarm( lsobGetTochedText(lsob), lsob.def.isBull ? "bottom" : "top")


        if action == "touch" or state.phase != 'closed'
            mitigateLsobDraw(lsob.draw)

        lsob.state := state
        lsob_records.set(i, lsob)


if lsob_records.size() > 0
    for i = lsob_records.size()-1 to 0
        lsob = lsob_records.get(i)
        //debugLabelOffset := debugLabel(debugLabelOffset, str.tostring(lsob.state.toDelete)+" "+str.tostring(lsob.def.startIndex))
        if lsob.state.toDelete
            removeLsobDraw(lsob.draw)
            lsob_records.remove(i)

if not na(lsobTouchedAlarm)
    showAlarm(lsobTouchedAlarm)
    alert(lsobTouchedAlarm.alarmText, alert.freq_once_per_bar)
