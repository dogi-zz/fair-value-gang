fvgMaxAgeBars = fvgMaxAge * hourBars

fvgDebug = false
fvgDebugStartTime = 0
fvgAtrHour = request.security(syminfo.tickerid, "60", ta.atr(fvgAtrLength))

getFvgThreshold() =>
    if fvgInSizeLimitMode == "percent"
        fvgPercentThreshold * open[1] / 100
    else
        fvgAtrHour * fvgAtrFactor

getFvgAlarmLineLevel(isBull, min, max) =>
    height = max - min
    if isBull
        max + height * fvgAlarmLevel
    else
        min - height * fvgAlarmLevel


//-----------------------------------------------------------------------------

type FvgDefinition 
    bool  isBull
    float min
    float max
    float alarmLevel
    float startValue
    int   startTime  // auto
    int   startIndex = na // manual
 
createFvgDefinition (bool isBull, float min, float max, float startValue) => 
    alarm_level = getFvgAlarmLineLevel(isBull, min, max)
    FvgDefinition.new(isBull, min, max, alarm_level, na, time[2], na)

//-----------------------------------------------------------------------------

type FvgState
    string label
    bool  was_invalidated = false
    bool  was_invalidate_enter = false
    bool  was_near = false
    bool  was_entered = false
    float  max_value = 0.0
    bool isDead = false

createFvgState(FvgDefinition fvg) => 
    percentText = getPercentTextFromSize(fvg.min, fvg.max)
    label = percentText + getConditionalText(fvgDebug, str.tostring(fvg.startTime), " ")
    FvgState.new()
    
//-----------------------------------------------------------------------------

type FvgDraw
    box   drawBox
    line  centerLine
    line  alarmLine
    label infoLabel

        
createFvgDraw (FvgDefinition fvg, FvgState state) => 
    height = fvg.max - fvg.min
    center_line_level = fvg.min + height * 0.5

    colorBg = fvg.isBull ? bullCss : bearCss
    colorLine = fvg.isBull ? bullCssBorder : bearCssBorder

    b = box.new(fvg.startIndex, fvg.max, bar_index, fvg.min, bgcolor = colorBg, border_color = colorLine)
    l1 = line.new(x1=fvg.startIndex, y1=center_line_level, x2=bar_index, y2=center_line_level, color=color.gray, style=line.style_dotted, xloc=xloc.bar_index)
    l2 = line.new(x1=fvg.startIndex, y1=fvg.alarmLevel, x2=bar_index, y2=fvg.alarmLevel, color=colorLine, style=line.style_dotted, xloc=xloc.bar_index)
    infoLabel = label.new(fvg.startIndex+1, center_line_level, state.label, size=size.small, color=colorLine, textcolor=textColor, style=label.style_label_left)

    FvgDraw.new(b, l1, l2, infoLabel)
    
fvgDrawSetInvalidated(FvgDraw draw, FvgDefinition def) =>
    if def.isBull
        box.set_bgcolor(draw.drawBox, bullCssLight)
        box.set_border_color(draw.drawBox, bullCssBorderLight)
    else 
        box.set_bgcolor(draw.drawBox, bearCssLight)
        box.set_border_color(draw.drawBox, bearCssBorderLight)

fvgDrawRemove(FvgDraw draw) =>
    box.delete(draw.drawBox)
    line.delete(draw.centerLine)
    line.delete(draw.alarmLine)
    label.delete(draw.infoLabel)


//-----------------------------------------------------------------------------

type Fvg
    FvgDefinition def
    FvgDraw draw
    FvgState state

//-----------------------------------------------------------------------------


fvgDetect() =>
    threshold = getFvgThreshold()
    before_low = low[3]
    before_high = high[3]
    after_low = low[1]
    after_high = high[1]
    FvgDefinition new_fvg = na
    isBull = after_low > before_high and (after_low - before_high) > threshold
    isBear = after_high < before_low and (before_low - after_high) > threshold
    if after_low > before_high and (after_low - before_high) > threshold
        new_fvg := createFvgDefinition(true, before_high, after_low, open[2])
    if after_high < before_low and (before_low - after_high) > threshold
        new_fvg := createFvgDefinition(false, after_high, before_low, open[2])
    new_fvg


    
fvgGetHeightCenter(Fvg fvg) =>
    height = fvg.def.max - fvg.def.min
    center = fvg.def.min + height / 2
    [height, center]

fvgGetMaxValue(Fvg fvg) =>
    [height, center] = fvgGetHeightCenter(fvg)
    fvg.def.isBull ? (close - center) : (center - close)

fvgGetImpaled(Fvg fvg) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low  < def.min) : (high > def.max)

fvgGetEntered(Fvg fvg, threshold) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low < def.max - height * threshold) : (high > def.min + height * threshold)
     
fvgGetCloseOutside(Fvg fvg) =>
    def = fvg.def
    def.isBull ? (close[1] > def.max) : (close[1] > def.min)
     
fvgGetNear(Fvg fvg) =>
    def = fvg.def
    [height, center] = fvgGetHeightCenter(fvg)
    def.isBull ? (low < def.alarmLevel) : (high > def.alarmLevel)
     

fvgSetEnterText(Fvg fvg) =>
    percentText = getPercentTextFromSize(fvg.def.min, fvg.def.max)
    new_text = percentText + " " + getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    label.set_text(fvg.draw.infoLabel, new_text + getConditionalText(fvgDebug, str.tostring(fvg.def.startTime), " "))
  
fvgGetDetectedText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-DETECTED"
    tagContent := tagContent + "," + "size:"+sizePercentText
    "size:"+sizePercentText+"["+tagContent+"]"
    
fvgGetEnteredText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-ENTER"
    tagContent := tagContent + "," + "size:"+sizePercentText
    tagContent := tagContent + "," + "ratio:"+maxRatioText
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgGetNearText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-NEAR"
    tagContent := tagContent + "," + "size:"+sizePercentText
    tagContent := tagContent + "," + "ratio:"+maxRatioText
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgGetInvalidatedText(Fvg fvg) => 
    sizePrecent = getPercentFromSize(fvg.def.min, fvg.def.max)
    sizePercentText = str.tostring(sizePrecent, "#.0")
    maxRatioText = getMaxRatioText(fvg.def.min, fvg.def.max, fvg.state.max_value)
    tagContent = "tf:"+str.tostring(timeframe.period)
    tagContent := tagContent + "," + "ts:"+str.tostring(fvg.def.startTime)
    tagContent := tagContent + "," + "dir:"+(fvg.def.isBull?'bull':'bear')
    tagContent := tagContent + "," + "type:"+"FVG-INVALIDATED"
    "size:"+sizePercentText+"["+tagContent+"]"
        
fvgPerformStep(Fvg fvg) =>
    actionInvalidate = false
    actionEntered = false
    actionNear = false
    expired = (bar_index - fvg.def.startIndex) > fvgMaxAgeBars
    state = fvg.state
    if not expired and not fvg.state.was_invalidated
        state.max_value := math.max(state.max_value, fvgGetMaxValue(fvg))
        if fvgGetImpaled(fvg)
            state.was_invalidated := true
            actionInvalidate := true
            state.isDead := true
        else if not state.was_invalidate_enter and fvgGetEntered(fvg, fvgTouchThreshold)
            state.was_invalidate_enter := true
        else if isNewHour and state.was_invalidate_enter and fvgGetCloseOutside(fvg)
            state.was_invalidated := true
            actionInvalidate := true
            state.isDead := true
        
        if not state.was_entered and fvgGetEntered(fvg, 0.)
            state.was_entered := true
            actionEntered := true
        else if not state.was_near and fvgGetNear(fvg)
            state.was_near := true
            actionNear := true
    else
        state.isDead := true
    [state, actionInvalidate, actionEntered, actionNear]

