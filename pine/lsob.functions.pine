
lsobMaxAgeBars = lsobMaxAge * hourBars

type LsobDefinition 
    string prefix
    bool  isBull
    float min
    float max
    int   startIndex = na // manual

createLsobDefinition (string prefix, bool isBull, float min, float max) => 
    LsobDefinition.new(prefix, isBull, min, max, na)
    
type LsobDraw
    box   drawBox
    line  topLine
    line  bottomLine
    label infoLabel

type LsobState
    string phase = 'pending'
    bool toDelete = false
    //bool isDelete = false
    //bool wasInvalidated = false
createLsobState () => 
    LsobState.new('pending', false)

type Lsob
    LsobDefinition def
    LsobDraw draw
    LsobState state

lsobGetName(LsobDefinition def) =>
    name = def.isBull ? "LSOB (bull)" : "LSOB (bear)"
    result = def.prefix + " " + name
    if lsobDebug
        result := result + " (" + str.tostring(def.startIndex) +")"
    result


createLsobDraw (LsobDefinition lsob) => 
    height = lsob.max - lsob.min
    center_line_level = lsob.min + height * 0.5

    colorLabel = lsob.isBull ? bullCssBorder : bearCssBorder
    colorBorder = lsob.isBull ? bullCssBorderLight : bearCssBorderLight

    b = box.new(lsob.startIndex, lsob.max, bar_index, lsob.min, border_color=trasparent, bgcolor=trasparent)
    topLine = line.new(lsob.startIndex, lsob.max, bar_index, lsob.max, color=colorBorder, style=line.style_dotted, xloc=xloc.bar_index)
    bottomLine = line.new(lsob.startIndex, lsob.min, bar_index, lsob.min, color=colorBorder, style=line.style_dotted, xloc=xloc.bar_index)
    infoLabelText = lsobGetName(lsob)
    infoLabelStyle = lsob.isBull ? label.style_label_upper_left :  label.style_label_lower_left
    infoLabelY  = lsob.isBull ? lsob.min : lsob.max
    infoLabel = label.new(lsob.startIndex, infoLabelY, infoLabelText, size=size.small, color=colorLabel, textcolor=textColor, style=infoLabelStyle)

    LsobDraw.new(b, topLine, bottomLine, infoLabel)

removeLsobDraw (LsobDraw draw) => 
    box.delete(draw.drawBox)
    label.delete(draw.infoLabel)
    line.delete(draw.topLine)
    line.delete(draw.bottomLine)

activateLsobDraw (LsobDefinition def, LsobDraw draw) => 
    colorBg = def.isBull ? bullCss : bearCss
    colorBorder = def.isBull ? bullCssBorder : bearCssBorder
    box.set_bgcolor(draw.drawBox, colorBg)
    line.set_color(draw.topLine, colorBorder)
    line.set_color(draw.bottomLine, colorBorder)

mitigateLsobDraw (LsobDraw draw) => 
    box.set_right(draw.drawBox, bar_index)
    line.set_x2(draw.topLine, bar_index)
    line.set_x2(draw.bottomLine, bar_index)

lsobGetTochedText(Lsob lsob) =>
    lsobGetName(lsob.def) + " Touched"


lsobGetLeaved(Lsob lsob, float l, float h) =>
    lsob.def.isBull ? (l > lsob.def.max) : (h < lsob.def.min)
    
lsobGetImpaled(Lsob lsob, float l, float h) =>
    lsob.def.isBull ? (l < lsob.def.min) : (h > lsob.def.max)
    
lsobGetTouched(Lsob lsob, float l, float h) =>
    lsob.def.isBull ? (l < lsob.def.max) : (h > lsob.def.min)

lsobDetect(prefix) =>
    highest = ta.highest(lsobCheckDistance)
    lowest = ta.lowest(lsobCheckDistance)
    float l = low[1]
    float h = high[1]
    isBull = l == lowest
    isBear = h == highest
    LsobDefinition new_lsob = na
    if isBull
        new_lsob := createLsobDefinition(prefix, true, l, h)
    if isBear
        new_lsob := createLsobDefinition(prefix, false, l, h)
    new_lsob

lsobCheckInBar(Lsob lsob, float l, float h) =>
    LsobState state = lsob.state
    string action = ""
    if not state.toDelete
        expired = (bar_index - lsob.def.startIndex) > lsobMaxAgeBars
        impaled = lsobGetImpaled(lsob, l, h)
        if expired
            action := "kill"
            state.toDelete := true
        else if impaled
            action := "kill"
            state.toDelete := true
        else if state.phase != 'closed'
            if state.phase != 'leaved'
                if lsobGetLeaved(lsob, l, h)
                    state.phase := 'leaved'
                    action := "activated"
            else if state.phase != 'closed'
                if lsobGetTouched(lsob, l, h)
                    state.phase := 'closed'
                    action := "touch"
    [state, action]
 